"""
Student information for this assignment:

Replace Joy Yi Lin with your name.
On my/our honor, Joy Yi Lin, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: Jl84785
"""


# TODO: implement this function. You may delete this comment after you are done.
def rail_fence_encode(string, key):
    """
    pre: string is a string of characters and key is a positive
        integer 2 or greater and strictly less than the length
        of string
    post: returns a single string that is encoded with
        rail fence algorithm
    """
    rails = ['' for _ in range(key)]
    rail = 0
    direction = 1

    for char in string:
        rails[rail] += char
        rail += direction
        if rail == 0 or rail == key - 1:
            direction *= -1

    return ''.join(rails)


# TODO: implement this function. You may delete this comment after you are done.
def rail_fence_decode(string, key):
    """
    pre: string is a string of characters and key is a positive
        integer 2 or greater and strictly less than the length
        of string
    post: function returns a single string that is decoded with
        rail fence algorithm
    """
    length = len(string)
    rail_positions = ['' for _ in range(length)]
    rail = 0
    step = 1

    for i in range(length):
        rail_positions[i] = rail
        rail += step
        if rail == 0 or rail == key - 1:
            step *= -1

    rail_buckets = ['' for _ in range(key)]
    rail_counts = [rail_positions.count(r) for r in range(key)]

    idx = 0
    for r in range(key):
        for _ in range(rail_counts[r]):
            rail_buckets[r] += string[idx]
            idx += 1

    result = ''
    rail_indices = [0] * key
    for r in rail_positions:
        result += rail_buckets[r][rail_indices[r]]
        rail_indices[r] += 1

    return result

# TODO: implement this function. You may delete this comment after you are done.
def filter_string(string):
    """
    pre: string is a string of characters
    post: function converts all characters to lower case and then
        removes all digits, punctuation marks, and spaces. It
        returns a single string with only lower case characters
    """
    filtered_string = ''
    for char in string.lower():
        if 'a' <= char <= 'z':
            filtered_string += char
    return filtered_string


# TODO: implement this function. You may delete this comment after you are done.
def encode_character(p, s):
    """
    pre: p is a character in the pass phrase and s is a character
        in the plain text
    post: function returns a single character encoded using the
        Vigenere algorithm. You may not use a 2-D list
    """
    p_value = ord(p) - ord('a')
    s_value = ord(s) - ord('a')
    encoded_val = (p_value + s_value) % 26
    return chr(encoded_val + ord('a'))

# TODO: implement this function. You may delete this comment after you are done.
def decode_character(p, s):
    """
    pre: p is a character in the pass phrase and s is a character
        in the encrypted text
    post: function returns a single character decoded using the
        Vigenere algorithm. You may not use a 2-D list
    """
    p_value = ord(p) - ord('a')
    s_value = ord(s) - ord('a')
    decoded_val = (s_value - p_value + 26) % 26
    return chr(decoded_val + ord('a'))

# TODO: implement this function. You may delete this comment after you are done.
def vigenere_encode(string, phrase):
    """
    pre: string is a string of characters and phrase is a pass phrase
    post: function returns a single string that is encoded with
        Vigenere algorithm
    """
    string = filter_string(string)
    phrase = filter_string(phrase)
    plain_text = ''
    for i, letter in enumerate(string):
        p_char = phrase[i % len(phrase)]
        text += encode_character(p_char,letter)
    return plain_text

# TODO: implement this function. You may delete this comment after you are done.
def vigenere_decode(string, phrase):
    """
    pre: string is a string of characters and phrase is a pass phrase
    post: function returns a single string that is decoded with
        Vigenere algorithm
    """
    string = filter_string(string)
    phrase = filter_string(phrase)
    plain_text = ''
    for i, letter in range(len(string)):
        p = phrase[i % len(phrase)]
        result += decode_character(p, letter)
    return plain_text

# TODO: implement this function. You may delete this comment after you are done.
def main():
    """Main function that reads stdin and runs each cipher"""
    # read the plain text from stdin 
    rail_plain_text = input().strip()
    # read the key from stdin (terminal/input)
    rail_key_encode = int(input().strip())
    # encrypt and print the encoded text using rail fence cipher
    rail_encoded_text = rail_fence_encode(rail_plain_text, rail_key_encode)

    # read encoded text from stdin (terminal/input)
    rail_encoded_input = input().strip()
    # read the key from stdin (terminal/input)
    rail_key_decode = int(input().strip())
    # decrypt and print the plain text using rail fence cipher
    rail_decoded_text = rail_fence_decode(rail_encoded_input, rail_key_decode)

    # read the plain text from stdin (terminal/input)
    vig_plain_text = input().strip()
    # read the pass phrase from stdin (terminal/input)
    vig_passphrase_encode = input().strip()
    # encrypt and print the encoded text using Vigenere cipher
    vig_encoded_text = vigenere_encode(vig_plain_text, vig_passphrase_encode)

    # read the encoded text from stdin (terminal/input)
    vig_encoded_input = input().strip()
    # read the pass phrase from stdin (terminal/input)
    vig_passphrase_decode = input().strip()
    # decrypt and print the plain text using Vigenere cipher
    vig_decoded_text = vigenere_decode(vig_encoded_input, vig_passphrase_decode)


# Do NOT modify the following code.
if __name__ == "__main__":
    main()
